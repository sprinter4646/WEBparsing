# https://stepik.org/lesson/701336/step/3?unit=701405
# CSV часть 3
# В этом уроке, мы будем получать данные сразу с восьми карточек одновременно. Как говорится, следите за руками.
# Мы хотим получить аккуратно отформатированные данные, лежащие в таблице excel,
# Откроем тренажер=http://parsinger.ru/html/index3_page_2.html и соберем с каждой карточки
# следующую информацию как на скриншоте
# Для начала посмотрим на структуру данной карточки, а конкретно на теги <li>. Мы видим,  что у всех необходимых нам
# элементов есть то, за что можно зацепиться. У каждого элемента есть  свой class='', а у тегов <li> ничего нет, только
# родительский элемент <div class='description'> . По нему мы и будем получать наши элементы <li>, причем все и сразу.
#
# Мы могли бы использовать код soup.find('div', class_='description').find_all('li'),  т.е., попросили бы наш
# интерпретатор найти блок div с классом description и в нем отыскать все теги <li>. Это отличный подход для одной
# карточки, а у нас их восемь. Это значит,
# что нам нужно искать все теги div с классом description на странице одновременно.
# Давайте посмотрим на код целиком:
#
# В переменной name у нас будет храниться список наименований товаров;
# В переменной description у нас будет храниться список списков описания товаров, которые находятся в <li>;
# В переменной price у нас будет храниться список цен товаров.
# Наша задача - объединить эти 3 списка в 1 список или кортеж, избегая вложенных списков. Если мы просто объединим эти
# три списка, мы получим
# ['Logitech G305 Lightspeed Wireless', '8920 рублей' ['Logitech', 'Мышь беспроводная','USB+радиоканал', 'Да']]
# Мы знаем, что модуль CSV может спокойно работать с вложенными списками. Но результат будет не тот, который мы ожидаем,
# - посмотрите на картинке. Поэтому нам нужно извлечь вложенный список.
# Блок №5 в коде ниже, решает эту задачу. В результате выполнения блока №5 мы получаем новый список result,
# который выглядит как нужно
# # ['Logitech G305 Lightspeed Wireless', '8920 рублей', 'Logitech', 'Мышь беспроводная','USB+радиоканал', 'Да']
# Такой список мы можем спокойно записать в файл, не опасаясь, что таблица уедет. Передадим список в метод
# .writerow(result) и полюбуемся результатом. Запустите данный код у себя в терминале.
#
# UPD: Код ниже был немного упрощен и исправлен, удалено открытие файлового дескриптора в цикле, что приводило к
# постоянному переоткрытию файла, а это для больших списков не очень хорошо. Теперь код выглядит короче и понятнее и не
# вызовет проблем в будущем.
import csv
import requests
from bs4 import BeautifulSoup

# 1 ------------------------------------------------------
with open('res_mouses.csv', 'w', encoding='utf-8-sig', newline='') as file:
    writer = csv.writer(file, delimiter=';')
    writer.writerow([
        'Наименование', 'Цена', 'Бренд', 'Тип', 'Подключение', 'Игровая'])
# 1 ------------------------------------------------------

# 2 ------------------------------------------------------
url = 'http://parsinger.ru/html/index3_page_2.html'

response = requests.get(url=url)
response.encoding = 'utf-8'
soup = BeautifulSoup(response.text, 'lxml')
# 2 ------------------------------------------------------

# 3 ------------------------------------------------------
name = [x.text.strip() for x in soup.find_all('a', class_='name_item')]
description = [x.text.split('\n') for x in soup.find_all('div', class_='description')]
price = [x.text for x in soup.find_all('p', class_='price')]
# 3 ------------------------------------------------------

# 4------------------------------------------------------

for item, price, descr in zip(name, price, description):
    flatten = item, price, *[x.split(':')[1].strip() for x in descr if x]

    file = open('res_mouses.csv', 'a', encoding='utf-8-sig', newline='')
    writer = csv.writer(file, delimiter=';')
    writer.writerow(flatten)
file.close()
print('Файл res_mouses.csv создан')
