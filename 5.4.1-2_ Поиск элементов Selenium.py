# https://stepik.org/lesson/709437/step/1?unit=710000
# Поиск элементов Selenium
# Существует два набора методов Selenium для поиска элементов на странице. Я продемонстрирую оба, а вы выберите то, что
# будет для вас удобнее и лучше подойдет к конкретной ситуации (лично я предпочитаю второй набор).
#
# .find_element_by_id("tag") — поиск по уникальному атрибуту id элемента. Лучше использовать именно поиск по id , т.к.
# мы знаем что  на странице может быть только 1 элемент с уникальным id, такой поиск является самым стабильным;
# .find_element_by_css_selector("tag") — используйте этот способ, когда хотите получить элемент с использованием
# синтаксиса CSS-селекторов;
# .find_element_by_xpath("path") — поиск с помощью языка запросов XPath, позволяет выполнять очень гибкий поиск
# элементов. Одно из веских оснований использовать XPath - ситуации, когда  на странице отсутствуют пригодные в качестве
# указателей атрибуты, такие как id или name;
# .find_element_by_name("tag") — используйте этот способ, когда известен атрибут name элемента. Результатом будет первый
# элемент с искомым значением атрибута name;
# .find_element_by_tag_name("tag") — поиск элемента по названию тега элемента;
# .find_element_by_class_name("tag") —поиск по значению атрибута class;
# .find_element_by_link_text("tag") — используйте этот способ, когда известен текст внутри тэга;
# .find_element_by_partial_link_text("tag") — поиск ссылки на странице, если текст селектора совпадает с любой частью
# текста ссылки.
# Стоит отметить, что этот набор методов немного устарел. Хотя до сих пор все работает, но PyCharm намекает =)
#
# Сравним два способа. Найдем на странице, кнопку “Купить” с id="sale_button" и совершим по ней клик.
# Вариант 2..find_element(By.ID, "sale_button")
import time
from selenium import webdriver
from selenium.webdriver.common.by import By

browser = webdriver.Chrome()
browser.get('http://parsinger.ru/html/watch/1/1_1.html')
browser.find_element(By.ID, "sale_button").click()

time.sleep(10)
